Basepage


package reinhard;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
public class BasePage {
	

		public static WebDriver driver;
		public String browser = "chrome";

		public BasePage() {
			if (driver == null) {
				if (browser.equals("chrome")) {
					System.setProperty("webdriver.chrome.driver",
							"C:\\Users\\Reinhard\\Desktop\\chromedriver_win32\\chromedriver.exe");
					driver = new ChromeDriver();
				} else if (browser.equals("firefox")) {
					System.setProperty("webdriver.gecko.driver", "Firefox Driver Server Path");
					driver = new FirefoxDriver();
				}
				driver.manage().window().maximize();
				driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
				driver.get("http://automationpractice.com/index.php");
			}
		}

		public boolean elementFound(WebElement element) {
			boolean res = false;
			try {
				res = element.isDisplayed();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return res;
		}

		public void setText(WebElement element, String name) {
			if (name != null) {
				element.click();
				element.clear();
				element.sendKeys(name);
			}
		}

		public String getTxtAttribute(WebElement element) {
			return element.getAttribute("value");
		}

		public String selectFromDropDown(WebElement element, String option) {
			Select obj = new Select(element);
			obj.selectByValue(option);
			return obj.getFirstSelectedOption().getText();
		}

		public boolean isElementVisible(WebElement element) {
			try {
				WebDriverWait wait = new WebDriverWait(driver, 90);
				wait.until(ExpectedConditions.visibilityOf(element));
				return true;
			} catch (Exception e) {
				return false;
			}
		}

		public String getTitlte() {
			return driver.getTitle();
		}	
		
		public void quitDriver() {
			driver.quit();
		}
	}


Homepage




package reinhard;

import java.util.Random;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class HomePage extends BasePage {
		
		@FindBy(xpath = "//div/ul/li[1]/a[text()='Women']")
		private static WebElement Womenmenu;
	
		@FindBy(xpath = "//div/ul/li[2]/a[text()='Dresses']")
		private WebElement Dressesmenu;
		
		@FindBy(xpath = "//div/ul/li[3]/a[text()='T-shirts']")
		private WebElement TShirtmenu;
		
		@FindBy(id = "newsletter-input")
		private WebElement mailid;
		
		@FindBy(name="submitNewsletter")
		private WebElement sendemail;
		
		@FindBy(xpath ="//*[@class='columns-container']//p[@class='alert alert-success']")
		private WebElement newsletter;
		

		//Project factory for @ declaration
		public HomePage() {
			PageFactory.initElements(driver, this);
		}
		
		
		public WebElement getWomenmenu1() {
			return Womenmenu;
		
		}
		
		public WebElement getDressesmenu() {
			Dressesmenu.click();
			return Dressesmenu;
			
		}
		
		public WebElement getTShirtmenu() {
			TShirtmenu.click();
			return TShirtmenu;
		}
		
public WebElement getWomenmenu() {
			Womenmenu.click();

			return Womenmenu;
		
		}

	
	public void getsubscription() {
		int random = new Random().nextInt(500000);
		System.out.println(random);
		setText(mailid, "Automation" + random +"@gmail.com");
		sendemail.click();		
	}
	
	
	public String getSubscriptionMessage() {
		return newsletter.getText();
	}
	
		
		}


test case
package reinhard2;

import org.testng.Assert;
import org.testng.annotations.Test;

import practice1.BasePage;
import reinhard.HomePage;

public class HomePageTest {

	HomePage homePage;
	BasePage bp;

	public HomePageTest() {
		homePage = new HomePage();
		bp = new BasePage();
	}

	@Test(enabled = false)
	public void verifytabs() {
		Assert.assertTrue(bp.elementFound(homePage.getWomenmenu()), "Failed");
		Assert.assertTrue(bp.elementFound(homePage.getDressesmenu()));
		Assert.assertTrue(bp.elementFound(homePage.getTShirtmenu()));
	}
	
	@Test
	public void checkEmailSubscription() {
		homePage.getsubscription();
		Assert.assertTrue(homePage.getSubscriptionMessage().contains("successfully"));
	}
	
		
	}
	



